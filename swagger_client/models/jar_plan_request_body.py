# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JarPlanRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_class': 'str',
        'program_args': 'str',
        'program_args_list': 'list[str]',
        'parallelism': 'int'
    }

    attribute_map = {
        'entry_class': 'entryClass',
        'program_args': 'programArgs',
        'program_args_list': 'programArgsList',
        'parallelism': 'parallelism'
    }

    def __init__(self, entry_class=None, program_args=None, program_args_list=None, parallelism=None):  # noqa: E501
        """JarPlanRequestBody - a model defined in Swagger"""  # noqa: E501
        self._entry_class = None
        self._program_args = None
        self._program_args_list = None
        self._parallelism = None
        self.discriminator = None
        if entry_class is not None:
            self.entry_class = entry_class
        if program_args is not None:
            self.program_args = program_args
        if program_args_list is not None:
            self.program_args_list = program_args_list
        if parallelism is not None:
            self.parallelism = parallelism

    @property
    def entry_class(self):
        """Gets the entry_class of this JarPlanRequestBody.  # noqa: E501


        :return: The entry_class of this JarPlanRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._entry_class

    @entry_class.setter
    def entry_class(self, entry_class):
        """Sets the entry_class of this JarPlanRequestBody.


        :param entry_class: The entry_class of this JarPlanRequestBody.  # noqa: E501
        :type: str
        """

        self._entry_class = entry_class

    @property
    def program_args(self):
        """Gets the program_args of this JarPlanRequestBody.  # noqa: E501


        :return: The program_args of this JarPlanRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._program_args

    @program_args.setter
    def program_args(self, program_args):
        """Sets the program_args of this JarPlanRequestBody.


        :param program_args: The program_args of this JarPlanRequestBody.  # noqa: E501
        :type: str
        """

        self._program_args = program_args

    @property
    def program_args_list(self):
        """Gets the program_args_list of this JarPlanRequestBody.  # noqa: E501


        :return: The program_args_list of this JarPlanRequestBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._program_args_list

    @program_args_list.setter
    def program_args_list(self, program_args_list):
        """Sets the program_args_list of this JarPlanRequestBody.


        :param program_args_list: The program_args_list of this JarPlanRequestBody.  # noqa: E501
        :type: list[str]
        """

        self._program_args_list = program_args_list

    @property
    def parallelism(self):
        """Gets the parallelism of this JarPlanRequestBody.  # noqa: E501


        :return: The parallelism of this JarPlanRequestBody.  # noqa: E501
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this JarPlanRequestBody.


        :param parallelism: The parallelism of this JarPlanRequestBody.  # noqa: E501
        :type: int
        """

        self._parallelism = parallelism

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JarPlanRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JarPlanRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
