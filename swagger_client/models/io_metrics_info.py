# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IOMetricsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read_bytes': 'int',
        'read_bytes_complete': 'bool',
        'write_bytes': 'int',
        'write_bytes_complete': 'bool',
        'read_records': 'int',
        'read_records_complete': 'bool',
        'write_records': 'int',
        'write_records_complete': 'bool'
    }

    attribute_map = {
        'read_bytes': 'read-bytes',
        'read_bytes_complete': 'read-bytes-complete',
        'write_bytes': 'write-bytes',
        'write_bytes_complete': 'write-bytes-complete',
        'read_records': 'read-records',
        'read_records_complete': 'read-records-complete',
        'write_records': 'write-records',
        'write_records_complete': 'write-records-complete'
    }

    def __init__(self, read_bytes=None, read_bytes_complete=None, write_bytes=None, write_bytes_complete=None, read_records=None, read_records_complete=None, write_records=None, write_records_complete=None):  # noqa: E501
        """IOMetricsInfo - a model defined in Swagger"""  # noqa: E501
        self._read_bytes = None
        self._read_bytes_complete = None
        self._write_bytes = None
        self._write_bytes_complete = None
        self._read_records = None
        self._read_records_complete = None
        self._write_records = None
        self._write_records_complete = None
        self.discriminator = None
        if read_bytes is not None:
            self.read_bytes = read_bytes
        if read_bytes_complete is not None:
            self.read_bytes_complete = read_bytes_complete
        if write_bytes is not None:
            self.write_bytes = write_bytes
        if write_bytes_complete is not None:
            self.write_bytes_complete = write_bytes_complete
        if read_records is not None:
            self.read_records = read_records
        if read_records_complete is not None:
            self.read_records_complete = read_records_complete
        if write_records is not None:
            self.write_records = write_records
        if write_records_complete is not None:
            self.write_records_complete = write_records_complete

    @property
    def read_bytes(self):
        """Gets the read_bytes of this IOMetricsInfo.  # noqa: E501


        :return: The read_bytes of this IOMetricsInfo.  # noqa: E501
        :rtype: int
        """
        return self._read_bytes

    @read_bytes.setter
    def read_bytes(self, read_bytes):
        """Sets the read_bytes of this IOMetricsInfo.


        :param read_bytes: The read_bytes of this IOMetricsInfo.  # noqa: E501
        :type: int
        """

        self._read_bytes = read_bytes

    @property
    def read_bytes_complete(self):
        """Gets the read_bytes_complete of this IOMetricsInfo.  # noqa: E501


        :return: The read_bytes_complete of this IOMetricsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._read_bytes_complete

    @read_bytes_complete.setter
    def read_bytes_complete(self, read_bytes_complete):
        """Sets the read_bytes_complete of this IOMetricsInfo.


        :param read_bytes_complete: The read_bytes_complete of this IOMetricsInfo.  # noqa: E501
        :type: bool
        """

        self._read_bytes_complete = read_bytes_complete

    @property
    def write_bytes(self):
        """Gets the write_bytes of this IOMetricsInfo.  # noqa: E501


        :return: The write_bytes of this IOMetricsInfo.  # noqa: E501
        :rtype: int
        """
        return self._write_bytes

    @write_bytes.setter
    def write_bytes(self, write_bytes):
        """Sets the write_bytes of this IOMetricsInfo.


        :param write_bytes: The write_bytes of this IOMetricsInfo.  # noqa: E501
        :type: int
        """

        self._write_bytes = write_bytes

    @property
    def write_bytes_complete(self):
        """Gets the write_bytes_complete of this IOMetricsInfo.  # noqa: E501


        :return: The write_bytes_complete of this IOMetricsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._write_bytes_complete

    @write_bytes_complete.setter
    def write_bytes_complete(self, write_bytes_complete):
        """Sets the write_bytes_complete of this IOMetricsInfo.


        :param write_bytes_complete: The write_bytes_complete of this IOMetricsInfo.  # noqa: E501
        :type: bool
        """

        self._write_bytes_complete = write_bytes_complete

    @property
    def read_records(self):
        """Gets the read_records of this IOMetricsInfo.  # noqa: E501


        :return: The read_records of this IOMetricsInfo.  # noqa: E501
        :rtype: int
        """
        return self._read_records

    @read_records.setter
    def read_records(self, read_records):
        """Sets the read_records of this IOMetricsInfo.


        :param read_records: The read_records of this IOMetricsInfo.  # noqa: E501
        :type: int
        """

        self._read_records = read_records

    @property
    def read_records_complete(self):
        """Gets the read_records_complete of this IOMetricsInfo.  # noqa: E501


        :return: The read_records_complete of this IOMetricsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._read_records_complete

    @read_records_complete.setter
    def read_records_complete(self, read_records_complete):
        """Sets the read_records_complete of this IOMetricsInfo.


        :param read_records_complete: The read_records_complete of this IOMetricsInfo.  # noqa: E501
        :type: bool
        """

        self._read_records_complete = read_records_complete

    @property
    def write_records(self):
        """Gets the write_records of this IOMetricsInfo.  # noqa: E501


        :return: The write_records of this IOMetricsInfo.  # noqa: E501
        :rtype: int
        """
        return self._write_records

    @write_records.setter
    def write_records(self, write_records):
        """Sets the write_records of this IOMetricsInfo.


        :param write_records: The write_records of this IOMetricsInfo.  # noqa: E501
        :type: int
        """

        self._write_records = write_records

    @property
    def write_records_complete(self):
        """Gets the write_records_complete of this IOMetricsInfo.  # noqa: E501


        :return: The write_records_complete of this IOMetricsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._write_records_complete

    @write_records_complete.setter
    def write_records_complete(self, write_records_complete):
        """Sets the write_records_complete of this IOMetricsInfo.


        :param write_records_complete: The write_records_complete of this IOMetricsInfo.  # noqa: E501
        :type: bool
        """

        self._write_records_complete = write_records_complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IOMetricsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOMetricsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
