# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobDetailsInfoNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parallelism': 'int',
        'operator': 'str',
        'operator_strategy': 'str',
        'description': 'str',
        'optimizer_properties': 'object'
    }

    attribute_map = {
        'id': 'id',
        'parallelism': 'parallelism',
        'operator': 'operator',
        'operator_strategy': 'operator_strategy',
        'description': 'description',
        'optimizer_properties': 'optimizer_properties'
    }

    def __init__(self, id=None, parallelism=None, operator=None, operator_strategy=None, description=None, optimizer_properties=None):  # noqa: E501
        """JobDetailsInfoNode - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._parallelism = None
        self._operator = None
        self._operator_strategy = None
        self._description = None
        self._optimizer_properties = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if parallelism is not None:
            self.parallelism = parallelism
        if operator is not None:
            self.operator = operator
        if operator_strategy is not None:
            self.operator_strategy = operator_strategy
        if description is not None:
            self.description = description
        if optimizer_properties is not None:
            self.optimizer_properties = optimizer_properties

    @property
    def id(self):
        """Gets the id of this JobDetailsInfoNode.  # noqa: E501


        :return: The id of this JobDetailsInfoNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobDetailsInfoNode.


        :param id: The id of this JobDetailsInfoNode.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parallelism(self):
        """Gets the parallelism of this JobDetailsInfoNode.  # noqa: E501


        :return: The parallelism of this JobDetailsInfoNode.  # noqa: E501
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this JobDetailsInfoNode.


        :param parallelism: The parallelism of this JobDetailsInfoNode.  # noqa: E501
        :type: int
        """

        self._parallelism = parallelism

    @property
    def operator(self):
        """Gets the operator of this JobDetailsInfoNode.  # noqa: E501


        :return: The operator of this JobDetailsInfoNode.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this JobDetailsInfoNode.


        :param operator: The operator of this JobDetailsInfoNode.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def operator_strategy(self):
        """Gets the operator_strategy of this JobDetailsInfoNode.  # noqa: E501


        :return: The operator_strategy of this JobDetailsInfoNode.  # noqa: E501
        :rtype: str
        """
        return self._operator_strategy

    @operator_strategy.setter
    def operator_strategy(self, operator_strategy):
        """Sets the operator_strategy of this JobDetailsInfoNode.


        :param operator_strategy: The operator_strategy of this JobDetailsInfoNode.  # noqa: E501
        :type: str
        """

        self._operator_strategy = operator_strategy

    @property
    def description(self):
        """Gets the description of this JobDetailsInfoNode.  # noqa: E501


        :return: The description of this JobDetailsInfoNode.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobDetailsInfoNode.


        :param description: The description of this JobDetailsInfoNode.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def optimizer_properties(self):
        """Gets the optimizer_properties of this JobDetailsInfoNode.  # noqa: E501


        :return: The optimizer_properties of this JobDetailsInfoNode.  # noqa: E501
        :rtype: object
        """
        return self._optimizer_properties

    @optimizer_properties.setter
    def optimizer_properties(self, optimizer_properties):
        """Sets the optimizer_properties of this JobDetailsInfoNode.


        :param optimizer_properties: The optimizer_properties of this JobDetailsInfoNode.  # noqa: E501
        :type: object
        """

        self._optimizer_properties = optimizer_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsInfoNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsInfoNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
