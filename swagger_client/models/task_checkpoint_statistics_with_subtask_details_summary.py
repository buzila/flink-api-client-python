# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TaskCheckpointStatisticsWithSubtaskDetailsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state_size': 'MinMaxAvgStatistics',
        'end_to_end_duration': 'MinMaxAvgStatistics',
        'checkpoint_duration': 'TaskCheckpointStatisticsWithSubtaskDetailsCheckpointDuration',
        'alignment': 'TaskCheckpointStatisticsWithSubtaskDetailsCheckpointAlignment'
    }

    attribute_map = {
        'state_size': 'state_size',
        'end_to_end_duration': 'end_to_end_duration',
        'checkpoint_duration': 'checkpoint_duration',
        'alignment': 'alignment'
    }

    def __init__(self, state_size=None, end_to_end_duration=None, checkpoint_duration=None, alignment=None):  # noqa: E501
        """TaskCheckpointStatisticsWithSubtaskDetailsSummary - a model defined in Swagger"""  # noqa: E501
        self._state_size = None
        self._end_to_end_duration = None
        self._checkpoint_duration = None
        self._alignment = None
        self.discriminator = None
        if state_size is not None:
            self.state_size = state_size
        if end_to_end_duration is not None:
            self.end_to_end_duration = end_to_end_duration
        if checkpoint_duration is not None:
            self.checkpoint_duration = checkpoint_duration
        if alignment is not None:
            self.alignment = alignment

    @property
    def state_size(self):
        """Gets the state_size of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501


        :return: The state_size of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :rtype: MinMaxAvgStatistics
        """
        return self._state_size

    @state_size.setter
    def state_size(self, state_size):
        """Sets the state_size of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.


        :param state_size: The state_size of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :type: MinMaxAvgStatistics
        """

        self._state_size = state_size

    @property
    def end_to_end_duration(self):
        """Gets the end_to_end_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501


        :return: The end_to_end_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :rtype: MinMaxAvgStatistics
        """
        return self._end_to_end_duration

    @end_to_end_duration.setter
    def end_to_end_duration(self, end_to_end_duration):
        """Sets the end_to_end_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.


        :param end_to_end_duration: The end_to_end_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :type: MinMaxAvgStatistics
        """

        self._end_to_end_duration = end_to_end_duration

    @property
    def checkpoint_duration(self):
        """Gets the checkpoint_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501


        :return: The checkpoint_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :rtype: TaskCheckpointStatisticsWithSubtaskDetailsCheckpointDuration
        """
        return self._checkpoint_duration

    @checkpoint_duration.setter
    def checkpoint_duration(self, checkpoint_duration):
        """Sets the checkpoint_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.


        :param checkpoint_duration: The checkpoint_duration of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :type: TaskCheckpointStatisticsWithSubtaskDetailsCheckpointDuration
        """

        self._checkpoint_duration = checkpoint_duration

    @property
    def alignment(self):
        """Gets the alignment of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501


        :return: The alignment of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :rtype: TaskCheckpointStatisticsWithSubtaskDetailsCheckpointAlignment
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.


        :param alignment: The alignment of this TaskCheckpointStatisticsWithSubtaskDetailsSummary.  # noqa: E501
        :type: TaskCheckpointStatisticsWithSubtaskDetailsCheckpointAlignment
        """

        self._alignment = alignment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskCheckpointStatisticsWithSubtaskDetailsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskCheckpointStatisticsWithSubtaskDetailsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
