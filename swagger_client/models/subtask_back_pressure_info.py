# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SubtaskBackPressureInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subtask': 'int',
        'backpressure_level': 'str',
        'ratio': 'float'
    }

    attribute_map = {
        'subtask': 'subtask',
        'backpressure_level': 'backpressure-level',
        'ratio': 'ratio'
    }

    def __init__(self, subtask=None, backpressure_level=None, ratio=None):  # noqa: E501
        """SubtaskBackPressureInfo - a model defined in Swagger"""  # noqa: E501
        self._subtask = None
        self._backpressure_level = None
        self._ratio = None
        self.discriminator = None
        if subtask is not None:
            self.subtask = subtask
        if backpressure_level is not None:
            self.backpressure_level = backpressure_level
        if ratio is not None:
            self.ratio = ratio

    @property
    def subtask(self):
        """Gets the subtask of this SubtaskBackPressureInfo.  # noqa: E501


        :return: The subtask of this SubtaskBackPressureInfo.  # noqa: E501
        :rtype: int
        """
        return self._subtask

    @subtask.setter
    def subtask(self, subtask):
        """Sets the subtask of this SubtaskBackPressureInfo.


        :param subtask: The subtask of this SubtaskBackPressureInfo.  # noqa: E501
        :type: int
        """

        self._subtask = subtask

    @property
    def backpressure_level(self):
        """Gets the backpressure_level of this SubtaskBackPressureInfo.  # noqa: E501


        :return: The backpressure_level of this SubtaskBackPressureInfo.  # noqa: E501
        :rtype: str
        """
        return self._backpressure_level

    @backpressure_level.setter
    def backpressure_level(self, backpressure_level):
        """Sets the backpressure_level of this SubtaskBackPressureInfo.


        :param backpressure_level: The backpressure_level of this SubtaskBackPressureInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ok", "low", "high"]  # noqa: E501
        if backpressure_level not in allowed_values:
            raise ValueError(
                "Invalid value for `backpressure_level` ({0}), must be one of {1}"  # noqa: E501
                .format(backpressure_level, allowed_values)
            )

        self._backpressure_level = backpressure_level

    @property
    def ratio(self):
        """Gets the ratio of this SubtaskBackPressureInfo.  # noqa: E501


        :return: The ratio of this SubtaskBackPressureInfo.  # noqa: E501
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this SubtaskBackPressureInfo.


        :param ratio: The ratio of this SubtaskBackPressureInfo.  # noqa: E501
        :type: float
        """

        self._ratio = ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubtaskBackPressureInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubtaskBackPressureInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
