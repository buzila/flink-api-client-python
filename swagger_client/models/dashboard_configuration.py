# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DashboardConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refresh_interval': 'int',
        'timezone_name': 'str',
        'timezone_offset': 'int',
        'flink_version': 'str',
        'flink_revision': 'str'
    }

    attribute_map = {
        'refresh_interval': 'refresh-interval',
        'timezone_name': 'timezone-name',
        'timezone_offset': 'timezone-offset',
        'flink_version': 'flink-version',
        'flink_revision': 'flink-revision'
    }

    def __init__(self, refresh_interval=None, timezone_name=None, timezone_offset=None, flink_version=None, flink_revision=None):  # noqa: E501
        """DashboardConfiguration - a model defined in Swagger"""  # noqa: E501
        self._refresh_interval = None
        self._timezone_name = None
        self._timezone_offset = None
        self._flink_version = None
        self._flink_revision = None
        self.discriminator = None
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if timezone_name is not None:
            self.timezone_name = timezone_name
        if timezone_offset is not None:
            self.timezone_offset = timezone_offset
        if flink_version is not None:
            self.flink_version = flink_version
        if flink_revision is not None:
            self.flink_revision = flink_revision

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this DashboardConfiguration.  # noqa: E501


        :return: The refresh_interval of this DashboardConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this DashboardConfiguration.


        :param refresh_interval: The refresh_interval of this DashboardConfiguration.  # noqa: E501
        :type: int
        """

        self._refresh_interval = refresh_interval

    @property
    def timezone_name(self):
        """Gets the timezone_name of this DashboardConfiguration.  # noqa: E501


        :return: The timezone_name of this DashboardConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._timezone_name

    @timezone_name.setter
    def timezone_name(self, timezone_name):
        """Sets the timezone_name of this DashboardConfiguration.


        :param timezone_name: The timezone_name of this DashboardConfiguration.  # noqa: E501
        :type: str
        """

        self._timezone_name = timezone_name

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this DashboardConfiguration.  # noqa: E501


        :return: The timezone_offset of this DashboardConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this DashboardConfiguration.


        :param timezone_offset: The timezone_offset of this DashboardConfiguration.  # noqa: E501
        :type: int
        """

        self._timezone_offset = timezone_offset

    @property
    def flink_version(self):
        """Gets the flink_version of this DashboardConfiguration.  # noqa: E501


        :return: The flink_version of this DashboardConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._flink_version

    @flink_version.setter
    def flink_version(self, flink_version):
        """Sets the flink_version of this DashboardConfiguration.


        :param flink_version: The flink_version of this DashboardConfiguration.  # noqa: E501
        :type: str
        """

        self._flink_version = flink_version

    @property
    def flink_revision(self):
        """Gets the flink_revision of this DashboardConfiguration.  # noqa: E501


        :return: The flink_revision of this DashboardConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._flink_revision

    @flink_revision.setter
    def flink_revision(self, flink_revision):
        """Sets the flink_revision of this DashboardConfiguration.


        :param flink_revision: The flink_revision of this DashboardConfiguration.  # noqa: E501
        :type: str
        """

        self._flink_revision = flink_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
