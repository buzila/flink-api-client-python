# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobDetailsInfoJobVertexDetailsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'parallelism': 'int',
        'status': 'str',
        'start_time': 'int',
        'end_time': 'int',
        'duration': 'int',
        'tasks': 'dict(str, int)',
        'metrics': 'IOMetricsInfo'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parallelism': 'parallelism',
        'status': 'status',
        'start_time': 'start-time',
        'end_time': 'end-time',
        'duration': 'duration',
        'tasks': 'tasks',
        'metrics': 'metrics'
    }

    def __init__(self, id=None, name=None, parallelism=None, status=None, start_time=None, end_time=None, duration=None, tasks=None, metrics=None):  # noqa: E501
        """JobDetailsInfoJobVertexDetailsInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._parallelism = None
        self._status = None
        self._start_time = None
        self._end_time = None
        self._duration = None
        self._tasks = None
        self._metrics = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if parallelism is not None:
            self.parallelism = parallelism
        if status is not None:
            self.status = status
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if duration is not None:
            self.duration = duration
        if tasks is not None:
            self.tasks = tasks
        if metrics is not None:
            self.metrics = metrics

    @property
    def id(self):
        """Gets the id of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The id of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobDetailsInfoJobVertexDetailsInfo.


        :param id: The id of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The name of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobDetailsInfoJobVertexDetailsInfo.


        :param name: The name of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parallelism(self):
        """Gets the parallelism of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The parallelism of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this JobDetailsInfoJobVertexDetailsInfo.


        :param parallelism: The parallelism of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: int
        """

        self._parallelism = parallelism

    @property
    def status(self):
        """Gets the status of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The status of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobDetailsInfoJobVertexDetailsInfo.


        :param status: The status of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "SCHEDULED", "DEPLOYING", "RUNNING", "FINISHED", "CANCELING", "CANCELED", "FAILED", "RECONCILING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def start_time(self):
        """Gets the start_time of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The start_time of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobDetailsInfoJobVertexDetailsInfo.


        :param start_time: The start_time of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The end_time of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobDetailsInfoJobVertexDetailsInfo.


        :param end_time: The end_time of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def duration(self):
        """Gets the duration of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The duration of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this JobDetailsInfoJobVertexDetailsInfo.


        :param duration: The duration of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def tasks(self):
        """Gets the tasks of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The tasks of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this JobDetailsInfoJobVertexDetailsInfo.


        :param tasks: The tasks of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: dict(str, int)
        """

        self._tasks = tasks

    @property
    def metrics(self):
        """Gets the metrics of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501


        :return: The metrics of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :rtype: IOMetricsInfo
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this JobDetailsInfoJobVertexDetailsInfo.


        :param metrics: The metrics of this JobDetailsInfoJobVertexDetailsInfo.  # noqa: E501
        :type: IOMetricsInfo
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsInfoJobVertexDetailsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsInfoJobVertexDetailsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
