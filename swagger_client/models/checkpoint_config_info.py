# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CheckpointConfigInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'object',
        'interval': 'int',
        'timeout': 'int',
        'min_pause': 'int',
        'max_concurrent': 'int',
        'externalization': 'ExternalizedCheckpointInfo'
    }

    attribute_map = {
        'mode': 'mode',
        'interval': 'interval',
        'timeout': 'timeout',
        'min_pause': 'min_pause',
        'max_concurrent': 'max_concurrent',
        'externalization': 'externalization'
    }

    def __init__(self, mode=None, interval=None, timeout=None, min_pause=None, max_concurrent=None, externalization=None):  # noqa: E501
        """CheckpointConfigInfo - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._interval = None
        self._timeout = None
        self._min_pause = None
        self._max_concurrent = None
        self._externalization = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if interval is not None:
            self.interval = interval
        if timeout is not None:
            self.timeout = timeout
        if min_pause is not None:
            self.min_pause = min_pause
        if max_concurrent is not None:
            self.max_concurrent = max_concurrent
        if externalization is not None:
            self.externalization = externalization

    @property
    def mode(self):
        """Gets the mode of this CheckpointConfigInfo.  # noqa: E501


        :return: The mode of this CheckpointConfigInfo.  # noqa: E501
        :rtype: object
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CheckpointConfigInfo.


        :param mode: The mode of this CheckpointConfigInfo.  # noqa: E501
        :type: object
        """

        self._mode = mode

    @property
    def interval(self):
        """Gets the interval of this CheckpointConfigInfo.  # noqa: E501


        :return: The interval of this CheckpointConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this CheckpointConfigInfo.


        :param interval: The interval of this CheckpointConfigInfo.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def timeout(self):
        """Gets the timeout of this CheckpointConfigInfo.  # noqa: E501


        :return: The timeout of this CheckpointConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CheckpointConfigInfo.


        :param timeout: The timeout of this CheckpointConfigInfo.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def min_pause(self):
        """Gets the min_pause of this CheckpointConfigInfo.  # noqa: E501


        :return: The min_pause of this CheckpointConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._min_pause

    @min_pause.setter
    def min_pause(self, min_pause):
        """Sets the min_pause of this CheckpointConfigInfo.


        :param min_pause: The min_pause of this CheckpointConfigInfo.  # noqa: E501
        :type: int
        """

        self._min_pause = min_pause

    @property
    def max_concurrent(self):
        """Gets the max_concurrent of this CheckpointConfigInfo.  # noqa: E501


        :return: The max_concurrent of this CheckpointConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrent

    @max_concurrent.setter
    def max_concurrent(self, max_concurrent):
        """Sets the max_concurrent of this CheckpointConfigInfo.


        :param max_concurrent: The max_concurrent of this CheckpointConfigInfo.  # noqa: E501
        :type: int
        """

        self._max_concurrent = max_concurrent

    @property
    def externalization(self):
        """Gets the externalization of this CheckpointConfigInfo.  # noqa: E501


        :return: The externalization of this CheckpointConfigInfo.  # noqa: E501
        :rtype: ExternalizedCheckpointInfo
        """
        return self._externalization

    @externalization.setter
    def externalization(self, externalization):
        """Sets the externalization of this CheckpointConfigInfo.


        :param externalization: The externalization of this CheckpointConfigInfo.  # noqa: E501
        :type: ExternalizedCheckpointInfo
        """

        self._externalization = externalization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckpointConfigInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckpointConfigInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
