# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobExceptionsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'root_exception': 'str',
        'timestamp': 'int',
        'all_exceptions': 'list[ExecutionExceptionInfo]',
        'truncated': 'bool'
    }

    attribute_map = {
        'root_exception': 'root-exception',
        'timestamp': 'timestamp',
        'all_exceptions': 'all-exceptions',
        'truncated': 'truncated'
    }

    def __init__(self, root_exception=None, timestamp=None, all_exceptions=None, truncated=None):  # noqa: E501
        """JobExceptionsInfo - a model defined in Swagger"""  # noqa: E501
        self._root_exception = None
        self._timestamp = None
        self._all_exceptions = None
        self._truncated = None
        self.discriminator = None
        if root_exception is not None:
            self.root_exception = root_exception
        if timestamp is not None:
            self.timestamp = timestamp
        if all_exceptions is not None:
            self.all_exceptions = all_exceptions
        if truncated is not None:
            self.truncated = truncated

    @property
    def root_exception(self):
        """Gets the root_exception of this JobExceptionsInfo.  # noqa: E501


        :return: The root_exception of this JobExceptionsInfo.  # noqa: E501
        :rtype: str
        """
        return self._root_exception

    @root_exception.setter
    def root_exception(self, root_exception):
        """Sets the root_exception of this JobExceptionsInfo.


        :param root_exception: The root_exception of this JobExceptionsInfo.  # noqa: E501
        :type: str
        """

        self._root_exception = root_exception

    @property
    def timestamp(self):
        """Gets the timestamp of this JobExceptionsInfo.  # noqa: E501


        :return: The timestamp of this JobExceptionsInfo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this JobExceptionsInfo.


        :param timestamp: The timestamp of this JobExceptionsInfo.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def all_exceptions(self):
        """Gets the all_exceptions of this JobExceptionsInfo.  # noqa: E501


        :return: The all_exceptions of this JobExceptionsInfo.  # noqa: E501
        :rtype: list[ExecutionExceptionInfo]
        """
        return self._all_exceptions

    @all_exceptions.setter
    def all_exceptions(self, all_exceptions):
        """Sets the all_exceptions of this JobExceptionsInfo.


        :param all_exceptions: The all_exceptions of this JobExceptionsInfo.  # noqa: E501
        :type: list[ExecutionExceptionInfo]
        """

        self._all_exceptions = all_exceptions

    @property
    def truncated(self):
        """Gets the truncated of this JobExceptionsInfo.  # noqa: E501


        :return: The truncated of this JobExceptionsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._truncated

    @truncated.setter
    def truncated(self, truncated):
        """Sets the truncated of this JobExceptionsInfo.


        :param truncated: The truncated of this JobExceptionsInfo.  # noqa: E501
        :type: bool
        """

        self._truncated = truncated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobExceptionsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobExceptionsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
