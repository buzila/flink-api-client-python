# coding: utf-8

"""
    Flink API Client

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobDetailsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jid': 'str',
        'name': 'str',
        'is_stoppable': 'bool',
        'state': 'str',
        'start_time': 'int',
        'end_time': 'int',
        'duration': 'int',
        'now': 'int',
        'timestamps': 'dict(str, int)',
        'vertices': 'list[JobDetailsInfoJobVertexDetailsInfo]',
        'status_counts': 'dict(str, int)',
        'plan': 'JobDetailsInfoJobPlan'
    }

    attribute_map = {
        'jid': 'jid',
        'name': 'name',
        'is_stoppable': 'isStoppable',
        'state': 'state',
        'start_time': 'start-time',
        'end_time': 'end-time',
        'duration': 'duration',
        'now': 'now',
        'timestamps': 'timestamps',
        'vertices': 'vertices',
        'status_counts': 'status-counts',
        'plan': 'plan'
    }

    def __init__(self, jid=None, name=None, is_stoppable=None, state=None, start_time=None, end_time=None, duration=None, now=None, timestamps=None, vertices=None, status_counts=None, plan=None):  # noqa: E501
        """JobDetailsInfo - a model defined in Swagger"""  # noqa: E501
        self._jid = None
        self._name = None
        self._is_stoppable = None
        self._state = None
        self._start_time = None
        self._end_time = None
        self._duration = None
        self._now = None
        self._timestamps = None
        self._vertices = None
        self._status_counts = None
        self._plan = None
        self.discriminator = None
        if jid is not None:
            self.jid = jid
        if name is not None:
            self.name = name
        if is_stoppable is not None:
            self.is_stoppable = is_stoppable
        if state is not None:
            self.state = state
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if duration is not None:
            self.duration = duration
        if now is not None:
            self.now = now
        if timestamps is not None:
            self.timestamps = timestamps
        if vertices is not None:
            self.vertices = vertices
        if status_counts is not None:
            self.status_counts = status_counts
        if plan is not None:
            self.plan = plan

    @property
    def jid(self):
        """Gets the jid of this JobDetailsInfo.  # noqa: E501


        :return: The jid of this JobDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._jid

    @jid.setter
    def jid(self, jid):
        """Sets the jid of this JobDetailsInfo.


        :param jid: The jid of this JobDetailsInfo.  # noqa: E501
        :type: str
        """

        self._jid = jid

    @property
    def name(self):
        """Gets the name of this JobDetailsInfo.  # noqa: E501


        :return: The name of this JobDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobDetailsInfo.


        :param name: The name of this JobDetailsInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_stoppable(self):
        """Gets the is_stoppable of this JobDetailsInfo.  # noqa: E501


        :return: The is_stoppable of this JobDetailsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_stoppable

    @is_stoppable.setter
    def is_stoppable(self, is_stoppable):
        """Sets the is_stoppable of this JobDetailsInfo.


        :param is_stoppable: The is_stoppable of this JobDetailsInfo.  # noqa: E501
        :type: bool
        """

        self._is_stoppable = is_stoppable

    @property
    def state(self):
        """Gets the state of this JobDetailsInfo.  # noqa: E501


        :return: The state of this JobDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobDetailsInfo.


        :param state: The state of this JobDetailsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "RUNNING", "FAILING", "FAILED", "CANCELLING", "CANCELED", "FINISHED", "RESTARTING", "SUSPENDING", "SUSPENDED", "RECONCILING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def start_time(self):
        """Gets the start_time of this JobDetailsInfo.  # noqa: E501


        :return: The start_time of this JobDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobDetailsInfo.


        :param start_time: The start_time of this JobDetailsInfo.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this JobDetailsInfo.  # noqa: E501


        :return: The end_time of this JobDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobDetailsInfo.


        :param end_time: The end_time of this JobDetailsInfo.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def duration(self):
        """Gets the duration of this JobDetailsInfo.  # noqa: E501


        :return: The duration of this JobDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this JobDetailsInfo.


        :param duration: The duration of this JobDetailsInfo.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def now(self):
        """Gets the now of this JobDetailsInfo.  # noqa: E501


        :return: The now of this JobDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._now

    @now.setter
    def now(self, now):
        """Sets the now of this JobDetailsInfo.


        :param now: The now of this JobDetailsInfo.  # noqa: E501
        :type: int
        """

        self._now = now

    @property
    def timestamps(self):
        """Gets the timestamps of this JobDetailsInfo.  # noqa: E501


        :return: The timestamps of this JobDetailsInfo.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this JobDetailsInfo.


        :param timestamps: The timestamps of this JobDetailsInfo.  # noqa: E501
        :type: dict(str, int)
        """

        self._timestamps = timestamps

    @property
    def vertices(self):
        """Gets the vertices of this JobDetailsInfo.  # noqa: E501


        :return: The vertices of this JobDetailsInfo.  # noqa: E501
        :rtype: list[JobDetailsInfoJobVertexDetailsInfo]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices):
        """Sets the vertices of this JobDetailsInfo.


        :param vertices: The vertices of this JobDetailsInfo.  # noqa: E501
        :type: list[JobDetailsInfoJobVertexDetailsInfo]
        """

        self._vertices = vertices

    @property
    def status_counts(self):
        """Gets the status_counts of this JobDetailsInfo.  # noqa: E501


        :return: The status_counts of this JobDetailsInfo.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._status_counts

    @status_counts.setter
    def status_counts(self, status_counts):
        """Sets the status_counts of this JobDetailsInfo.


        :param status_counts: The status_counts of this JobDetailsInfo.  # noqa: E501
        :type: dict(str, int)
        """

        self._status_counts = status_counts

    @property
    def plan(self):
        """Gets the plan of this JobDetailsInfo.  # noqa: E501


        :return: The plan of this JobDetailsInfo.  # noqa: E501
        :rtype: JobDetailsInfoJobPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this JobDetailsInfo.


        :param plan: The plan of this JobDetailsInfo.  # noqa: E501
        :type: JobDetailsInfoJobPlan
        """

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
